package day05

import (
	"AdventOfCode2019/util"
	"fmt"
)

const OPC_HALT = 99
const OPC_ADD = 1
const OPC_MULTIPLY = 2
const OPC_SAVE_INPUT = 3
const OPC_OUTPUT_VAL = 4
const OPC_JUMP_IF_TRUE = 5
const OPC_JUMP_IF_FALSE = 6
const OPC_LESS_THAN = 7
const OPC_EQUALS = 8

func solve() {
	program := "3,225,1,225,6,6,1100,1,238,225,104,0,1101,90,64,225,1101,15,56,225,1,14,153,224,101,-147,224,224,4,224,1002,223,8,223,1001,224,3,224,1,224,223,223,2,162,188,224,101,-2014,224,224,4,224,1002,223,8,223,101,6,224,224,1,223,224,223,1001,18,81,224,1001,224,-137,224,4,224,1002,223,8,223,1001,224,3,224,1,223,224,223,1102,16,16,224,101,-256,224,224,4,224,1002,223,8,223,1001,224,6,224,1,223,224,223,101,48,217,224,1001,224,-125,224,4,224,1002,223,8,223,1001,224,3,224,1,224,223,223,1002,158,22,224,1001,224,-1540,224,4,224,1002,223,8,223,101,2,224,224,1,223,224,223,1101,83,31,225,1101,56,70,225,1101,13,38,225,102,36,192,224,1001,224,-3312,224,4,224,1002,223,8,223,1001,224,4,224,1,224,223,223,1102,75,53,225,1101,14,92,225,1101,7,66,224,101,-73,224,224,4,224,102,8,223,223,101,3,224,224,1,224,223,223,1101,77,60,225,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,7,226,677,224,1002,223,2,223,1005,224,329,1001,223,1,223,1007,226,677,224,1002,223,2,223,1005,224,344,101,1,223,223,108,226,226,224,1002,223,2,223,1006,224,359,101,1,223,223,7,226,226,224,102,2,223,223,1005,224,374,101,1,223,223,8,677,677,224,1002,223,2,223,1005,224,389,1001,223,1,223,107,677,677,224,102,2,223,223,1006,224,404,101,1,223,223,1107,677,226,224,102,2,223,223,1006,224,419,1001,223,1,223,1008,226,226,224,1002,223,2,223,1005,224,434,1001,223,1,223,7,677,226,224,102,2,223,223,1006,224,449,1001,223,1,223,1107,226,226,224,1002,223,2,223,1005,224,464,101,1,223,223,1108,226,677,224,102,2,223,223,1005,224,479,101,1,223,223,1007,677,677,224,102,2,223,223,1006,224,494,1001,223,1,223,1107,226,677,224,1002,223,2,223,1005,224,509,101,1,223,223,1007,226,226,224,1002,223,2,223,1006,224,524,101,1,223,223,107,226,226,224,1002,223,2,223,1005,224,539,1001,223,1,223,1108,677,677,224,1002,223,2,223,1005,224,554,101,1,223,223,1008,677,226,224,102,2,223,223,1006,224,569,1001,223,1,223,8,226,677,224,102,2,223,223,1005,224,584,1001,223,1,223,1008,677,677,224,1002,223,2,223,1006,224,599,1001,223,1,223,108,677,677,224,102,2,223,223,1006,224,614,1001,223,1,223,108,226,677,224,102,2,223,223,1005,224,629,101,1,223,223,8,677,226,224,102,2,223,223,1005,224,644,101,1,223,223,107,677,226,224,1002,223,2,223,1005,224,659,101,1,223,223,1108,677,226,224,102,2,223,223,1005,224,674,1001,223,1,223,4,223,99,226"
	intCode(util.ToInts(program), 5)
}

func paramMode(opcodes []int, ptr int, parameter int) int {
	j := 10
	for i := 0; i < parameter; i++ {
		j *= 10
	}
	parameterMode := (opcodes[ptr] / j) % 10

	switch parameterMode {
	case 0:
		return opcodes[opcodes[ptr+parameter]]
	case 1:
		return opcodes[ptr+parameter]
	}
	return 0
}

func intCode(ints []int, input int) {
	for ptr := 0; ptr < len(ints); {
		opCode := ints[ptr] % 100

		switch opCode {
		case OPC_ADD:
			ints[ints[ptr+3]] = paramMode(ints, ptr, 1) + paramMode(ints, ptr, 2)
			ptr += 4
		case OPC_MULTIPLY:
			ints[ints[ptr+3]] = paramMode(ints, ptr, 1) * paramMode(ints, ptr, 2)
			ptr += 4
		case OPC_SAVE_INPUT:
			// INPUT
			ints[ints[ptr+1]] = input
			ptr += 2
		case OPC_OUTPUT_VAL:
			fmt.Printf("OUTPUT  %v \n", paramMode(ints, ptr, 1))

			ptr += 2
		case OPC_JUMP_IF_TRUE:
			if paramMode(ints, ptr, 1) == 0 {
				ptr += 3
			} else {
				ptr = paramMode(ints, ptr, 2)
			}
		case OPC_JUMP_IF_FALSE:
			if paramMode(ints, ptr, 1) == 0 {
				ptr = paramMode(ints, ptr, 2)
			} else {
				ptr += 3
			}
		case OPC_LESS_THAN:
			if paramMode(ints, ptr, 1) < paramMode(ints, ptr, 2) {
				ints[ints[ptr+3]] = 1
			} else {
				ints[ints[ptr+3]] = 0
			}
			ptr += 4
		case OPC_EQUALS:
			// EQUALS
			if paramMode(ints, ptr, 1) == paramMode(ints, ptr, 2) {
				ints[ints[ptr+3]] = 1
			} else {
				ints[ints[ptr+3]] = 0
			}
			ptr += 4
		case OPC_HALT:
			fmt.Printf("halt!: %d", ints[ptr])
			return
		default:
			fmt.Printf("Unexpected opCode: %d", ints[ptr])
			return
		}
	}

}
